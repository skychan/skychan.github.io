<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Latex | Sky's Octopress Blog]]></title>
  <link href="http://skychan.github.io/blog/categories/latex/atom.xml" rel="self"/>
  <link href="http://skychan.github.io/"/>
  <updated>2018-03-09T16:05:03+08:00</updated>
  <id>http://skychan.github.io/</id>
  <author>
    <name><![CDATA[Sky Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LaTeX 结合 Git 的修订模式]]></title>
    <link href="http://skychan.github.io/blog/2018/03/09/latex-jie-he-git-de-xiu-ding-mo-shi/"/>
    <updated>2018-03-09T15:54:48+08:00</updated>
    <id>http://skychan.github.io/blog/2018/03/09/latex-jie-he-git-de-xiu-ding-mo-shi</id>
    <content type="html"><![CDATA[<p>LaTeX 写作的时候，尤其是经过一番修改之后，会遇到这样的问题：怎样标出哪些部分修改了哪些地方，也就是类似MS Word 的修订功能？</p>

<!--more-->

<h2 id="latexdiff">单纯的修订标记工具——<code>latexdiff</code></h2>

<p>TeXLive 自带的工具其实可以做到这一点，但是单纯的使用它，需要注意一些地方。比如说，你有一个修改好的文件 <code>new.tex</code>，那么在进行修改之前，记得要备份未修改文件，比如说修改前的内容保存在 <code>old.tex</code>。那么，接下来，可以使用<code>latexdiff</code>工具生成附带修订的文件：</p>

<pre><code>latexdiff old.tex new.tex &gt; revised.tex
</code></pre>

<p>这样，就得到了一个附带修改标记的<code>revised.tex</code>文件。需要注意的是，直接进行编译<code>revised.tex</code>可能会出错，需要根据提示查找问题并进行改动。</p>

<p>此外，对于比较长的文档，大多会采用<code>\input{}</code>等导入其他章节内容的命令，那么需要使用<code>--expand</code> 选项。</p>

<p><strong>注意事项</strong>：</p>

<ol>
  <li>修改文件前，要保存。</li>
  <li>排查修订标记文件的错误。</li>
  <li><code>--expand</code> 选项应对<code>\input{}</code>、<code>\include{}</code>等命令。</li>
</ol>

<h2 id="latexdiff-vc">结合版本控制的修订标记工具——<code>latexdiff-vc</code></h2>
<p>一般情况下，修改的次数很多，每一个版本都保存的话，虽然不占什么空间，但是很啰嗦。现存很多版本控制软件能很好地控制版本，所以也就出现了升级工具：<code>latexdiff-vc</code>。</p>

<p>这个命令默认用<code>git</code>作为版本控制工具，对于<code>svn</code>等其他主流版本控制工具也适用。这里以<code>git</code>为例子，对文件<code>main.tex</code>的修订版本控制的大致工作流程是这样：</p>

<h3 id="section">1. 设置标签。</h3>
<p>在每次完成文档编辑和修改，添加到版本控制系统并提交后，对这次提交（也就是这次修改好的文档版本）进行标签设置：</p>

<pre><code>git tag '[type any information you like]'
</code></pre>

<p>其中，中括号中的内容自己定，这是对这次版本进行标记。</p>

<h3 id="section-1">2. 切换版本</h3>
<p>假设你在写作的过程中，有许多标签已经设定好了，你要比较<code>ver_new</code>和<code>ver_old</code>两个标签对应的版本的修订区别，首先切换到要修改后的标签<code>ver_new</code>:</p>

<pre><code>git checkout ver_new
</code></pre>

<p>当前工作版本如果已经是<code>ver_new</code>就可以跳过这步操作。</p>

<h3 id="section-2">3. 输出修订标记</h3>
<p>最后，输出修订标记文档即可：</p>

<pre><code>latexdiff-vc -r ver_old --flatten main.tex
</code></pre>

<p>这样一来，如果没有出错，会输出名为<code>main-diffver_old.tex</code>的文档。其中<code>--flatten</code>选项和前面<code>--expand</code>是同一个作用，不再多说。</p>

<p>此外，可以直接加上<code>--pdf</code>选项直接编译生成带修订的文档。但个人经验来看，不适合这么做，因为生成的修订标记文档常常不能编译通过，需要看报错来修改，尤其是在浮动体、图片、表格比较多的时候。</p>

<p><strong>注意事项</strong>：</p>

<ol>
  <li><code>git commit</code>之后要<code>git tag</code>。</li>
  <li>切换到修改后的版本。</li>
  <li>排查修订标记文档中的编译错误。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TexLive 跨版本更新]]></title>
    <link href="http://skychan.github.io/blog/2016/06/20/texlive-kua-ban-ben-geng-xin/"/>
    <updated>2016-06-20T22:25:52+08:00</updated>
    <id>http://skychan.github.io/blog/2016/06/20/texlive-kua-ban-ben-geng-xin</id>
    <content type="html"><![CDATA[<p>前段时间，TexLive 2016 发布了，也就意味着2015 版本不再更新。官方是不让跨版本升级的，各大论坛也如是说。然而我发现并非如此，而且需要做的很简单。
<!--more--></p>

<p>举例来说，如果从<a href="http://mirrors.ustc.edu.cn/CTAN/">中科大镜像站</a>作为仓库源，那么下载<a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet/update-tlmgr-latest.sh">update-tlmgr-latest.sh</a>，然后执行，就可以了。如果你觉得要再做什么，那么就把本地的<code>2015</code>路径名改为<code>2016</code>，并修改相应环境变量为<code>2016</code>即可，然后愉快地更新吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim-latex 整合latexmk]]></title>
    <link href="http://skychan.github.io/blog/2016/02/05/latexmk-implement-vim-latex/"/>
    <updated>2016-02-05T00:40:39+08:00</updated>
    <id>http://skychan.github.io/blog/2016/02/05/latexmk-implement-vim-latex</id>
    <content type="html"><![CDATA[<p>今日体验了一把vim-latex 插件，感觉很棒，然而挑剔的我还是遇到了几个问题：</p>

<ol>
  <li>
    <p>OSX 系统中Alt 键相关的快捷键失效。</p>
  </li>
  <li>
    <p>插件自带的编译快捷键<code>\ll</code>只能用pdflatex 引擎，并且有编号的时候需要多编译几次，而我通常使用的是xetex 引擎。</p>
  </li>
</ol>

<!--more-->

<p>问题1 比较容易解决，把用到的Alt 相关快捷键重新绑定到Meta(Option)键上，经过一番Google，参考vim-latex 插件文档<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> 以及sidyll 在stackoverflow 上解决关于alt 的绑定的方法<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> 的灵感，作出解决方案：</p>

<p><figure class='code'><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>imap ¬ &lt;plug>Tex_LeftRight
</span><span class='line'>imap ∫ &lt;plug>Tex_MathBF
</span><span class='line'>imap ç &lt;plug>Tex_MathCal
</span><span class='line'>imap ˆ &lt;plug>Tex_InsertItemOnThisLine</span></code></pre></td></tr></table></div></figure></plug></plug></plug></plug></p>

<p>问题2 稍微棘手一点，也绕了一个弯。首先参考了Mass 在tex.stackexchange上的关于设置xelatex的方法<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup> 作出如下修改：
<figure class='code'><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ComplieWithXeTeX()
</span><span class='line'>    let oldRule = g:Tex_CompileRule_pdf
</span><span class='line'>    let g:Tex_CompileRule_pdf = ‘xelatex –synctex=-1 -src-specials -interaction=nonstopmode $*’
</span><span class='line'>    call Tex_RunLaTeX()
</span><span class='line'>    let g:Tex_CompileRule_pdf = oldRule
</span><span class='line'>endfunction
</span><span class='line'>map &lt;leader>lx :&lt;c-u>call ComplieWithXeTeX()&lt;cr></span></code></pre></td></tr></table></div></figure></cr></c-u></leader></p>

<p>通过临时改变<code>Tex_CompileRule_pdf</code>这个内置参数，来调用所需引擎 。现在，问题似乎解决了，通过lx来使用xelatex，ll启动pdflatex，但是，有编号的时候，比如引用公式，则需要编译多次，不太方便，曾样才能像使用<code>latexmk</code> 这个命令这么方便呢？在Brian 的博客<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup>的启发下，得到如下解决办法：
<figure class='code'><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function CompileWithLatexmk()
</span><span class='line'>    let targ = expand(“%:t”)
</span><span class='line'>    execute ‘!latexmk ‘. targ
</span><span class='line'>    call ErrorCheck()
</span><span class='line'>endfunction
</span><span class='line'>function ErrorCheck()
</span><span class='line'>    let log = expand(“%:r”) . “.” . “log”
</span><span class='line'>    try
</span><span class='line'>         silent execute ‘vimgrep /^!/ ‘ . log
</span><span class='line'>        copen
</span><span class='line'>        catch /^Vim\%((\a+))=:E480/
</span><span class='line'>    endtry
</span><span class='line'>endfunction
</span><span class='line'>map &lt;leader>lg :&lt;c-u>call CompileWithLatexmk()&lt;cr></span></code></pre></td></tr></table></div></figure>
加入了错误日志回复，虽然也能用了，但是和原生的插件错误日志显示完全不同，关闭会关闭整个文档。正当一筹莫展之际，灵感一现的我突然想到，如果把第一个方法结合````latexmk````，不就完美了？所以最终解决方案如下：
<figure class='code'><figcaption><span>.vimrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ComplieWithXeTeX()
</span><span class='line'>    let oldRule = g:Tex_CompileRule_pdf
</span><span class='line'>    let g:Tex_CompileRule_pdf = 'latexmk --synctex=-1 -src-specials -interaction=nonstopmode $*'
</span><span class='line'>    call Tex_RunLaTeX()
</span><span class='line'>    let g:Tex_CompileRule_pdf = oldRule
</span><span class='line'>endfunction
</span><span class='line'>map &lt;leader>lx :&lt;c-u>call ComplieWithXeTeX()&lt;cr>&lt;/cr>&lt;/c-u>&lt;/leader>&lt;/cr>&lt;/c-u>&lt;/leader>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>function CleanTempFiles()
</span><span class='line'>    execute ‘!latexmk -c’
</span><span class='line'>endfunction
</span><span class='line'>map &lt;leader>lc :&lt;c-u>call CleanTempFiles()&lt;cr></span></code></pre></td></tr></table></div></figure>
其实就是把```xelatex```换成```latexmk```，最后还增加定义了自动清理临时文件的命令。</cr></c-u></leader></p>

<p>最后，祭出我的<code>.latexmkrc</code><sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup>，希望能帮到偶然读到的人。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://vim-latex.sourceforge.net/documentation/latex-suite/latex-suite-maps.html">Vim-latex User Manual 10.1 Latex-Suite Maps</a> <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://stackoverflow.com/questions/5379837/is-it-possible-to-mapping-alt-hjkl-in-insert-mode">Can I map Alt key in Vim?</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://tex.stackexchange.com/questions/150770/how-to-make-vim-short-key-for-xelatex-and-pdflatex-both">How to make vim short key for xelatex and pdflatex both?</a> <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p><a href="http://www.hesperusisphosphorus.com/blog/2014/01/25/compile-with-latexmk/">Compile with Latexmk in Vim</a> <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><a href="https://gist.github.com/skychan/153b764daf585b308356">My Github Gist</a> <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
