<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 版本控制 | Sky's Octopress Blog]]></title>
  <link href="http://skychan.github.io/blog/categories/ban-ben-kong-zhi/atom.xml" rel="self"/>
  <link href="http://skychan.github.io/"/>
  <updated>2018-03-09T16:05:03+08:00</updated>
  <id>http://skychan.github.io/</id>
  <author>
    <name><![CDATA[Sky Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LaTeX 结合 Git 的修订模式]]></title>
    <link href="http://skychan.github.io/blog/2018/03/09/latex-jie-he-git-de-xiu-ding-mo-shi/"/>
    <updated>2018-03-09T15:54:48+08:00</updated>
    <id>http://skychan.github.io/blog/2018/03/09/latex-jie-he-git-de-xiu-ding-mo-shi</id>
    <content type="html"><![CDATA[<p>LaTeX 写作的时候，尤其是经过一番修改之后，会遇到这样的问题：怎样标出哪些部分修改了哪些地方，也就是类似MS Word 的修订功能？</p>

<!--more-->

<h2 id="latexdiff">单纯的修订标记工具——<code>latexdiff</code></h2>

<p>TeXLive 自带的工具其实可以做到这一点，但是单纯的使用它，需要注意一些地方。比如说，你有一个修改好的文件 <code>new.tex</code>，那么在进行修改之前，记得要备份未修改文件，比如说修改前的内容保存在 <code>old.tex</code>。那么，接下来，可以使用<code>latexdiff</code>工具生成附带修订的文件：</p>

<pre><code>latexdiff old.tex new.tex &gt; revised.tex
</code></pre>

<p>这样，就得到了一个附带修改标记的<code>revised.tex</code>文件。需要注意的是，直接进行编译<code>revised.tex</code>可能会出错，需要根据提示查找问题并进行改动。</p>

<p>此外，对于比较长的文档，大多会采用<code>\input{}</code>等导入其他章节内容的命令，那么需要使用<code>--expand</code> 选项。</p>

<p><strong>注意事项</strong>：</p>

<ol>
  <li>修改文件前，要保存。</li>
  <li>排查修订标记文件的错误。</li>
  <li><code>--expand</code> 选项应对<code>\input{}</code>、<code>\include{}</code>等命令。</li>
</ol>

<h2 id="latexdiff-vc">结合版本控制的修订标记工具——<code>latexdiff-vc</code></h2>
<p>一般情况下，修改的次数很多，每一个版本都保存的话，虽然不占什么空间，但是很啰嗦。现存很多版本控制软件能很好地控制版本，所以也就出现了升级工具：<code>latexdiff-vc</code>。</p>

<p>这个命令默认用<code>git</code>作为版本控制工具，对于<code>svn</code>等其他主流版本控制工具也适用。这里以<code>git</code>为例子，对文件<code>main.tex</code>的修订版本控制的大致工作流程是这样：</p>

<h3 id="section">1. 设置标签。</h3>
<p>在每次完成文档编辑和修改，添加到版本控制系统并提交后，对这次提交（也就是这次修改好的文档版本）进行标签设置：</p>

<pre><code>git tag '[type any information you like]'
</code></pre>

<p>其中，中括号中的内容自己定，这是对这次版本进行标记。</p>

<h3 id="section-1">2. 切换版本</h3>
<p>假设你在写作的过程中，有许多标签已经设定好了，你要比较<code>ver_new</code>和<code>ver_old</code>两个标签对应的版本的修订区别，首先切换到要修改后的标签<code>ver_new</code>:</p>

<pre><code>git checkout ver_new
</code></pre>

<p>当前工作版本如果已经是<code>ver_new</code>就可以跳过这步操作。</p>

<h3 id="section-2">3. 输出修订标记</h3>
<p>最后，输出修订标记文档即可：</p>

<pre><code>latexdiff-vc -r ver_old --flatten main.tex
</code></pre>

<p>这样一来，如果没有出错，会输出名为<code>main-diffver_old.tex</code>的文档。其中<code>--flatten</code>选项和前面<code>--expand</code>是同一个作用，不再多说。</p>

<p>此外，可以直接加上<code>--pdf</code>选项直接编译生成带修订的文档。但个人经验来看，不适合这么做，因为生成的修订标记文档常常不能编译通过，需要看报错来修改，尤其是在浮动体、图片、表格比较多的时候。</p>

<p><strong>注意事项</strong>：</p>

<ol>
  <li><code>git commit</code>之后要<code>git tag</code>。</li>
  <li>切换到修改后的版本。</li>
  <li>排查修订标记文档中的编译错误。</li>
</ol>
]]></content>
  </entry>
  
</feed>
