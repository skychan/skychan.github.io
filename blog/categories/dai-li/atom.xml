<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 代理 | Sky's Octopress Blog]]></title>
  <link href="http://skychan.github.io/blog/categories/dai-li/atom.xml" rel="self"/>
  <link href="http://skychan.github.io/"/>
  <updated>2016-12-18T11:36:08+08:00</updated>
  <id>http://skychan.github.io/</id>
  <author>
    <name><![CDATA[Sky Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSH 通道的代理设置]]></title>
    <link href="http://skychan.github.io/blog/2015/05/11/use-ssh-through-proxy/"/>
    <updated>2015-05-11T20:45:38+08:00</updated>
    <id>http://skychan.github.io/blog/2015/05/11/use-ssh-through-proxy</id>
    <content type="html"><![CDATA[<h2>背景和问题</h2>

<p>在学校实验室，一般都通过服务器配置的代理来上网，因为这样方便，但更重要的是网速！然而代理上网常常会遇到一些小麻烦，在之前的网志里面也讲到一些，今天要来分享的是和ssh 通道相关的代理配置的解决方案。</p>

<!--more-->


<p>需要用到ssh 通道的地方还挺多的，比如这个问题的源头：通过代理方式向我的github 托管库中提交代码。由于系统已经设配置好了代理，可以通过http 通道直接提交代码，然而这样的话每次都要输入密码，而使用ssh 通道会提示连接失败的错误。网上有类似的问题提出，并且也有许多解决办法。有些是通过修改git 的配置来实现的，感觉这不是从本质上解决问题，本质上应该是配置ssh 来解决问题。当然，我提供的解决方案也是站在巨人的肩上。</p>

<h2>connect</h2>

<p><a href="https://bitbucket.org/gotoh/connect">connect</a> 提供了可以让ssh 通道走代理的小工具源码,拿到后编译成可执行文件，记得修改权限：</p>

<pre><code>$ gcc -o connect connect.c
$ sudo chmod +x connect
$ mv connect ~/bin/connect
</code></pre>

<p>然后在<code>~/.ssh/</code> 中创建config 文件如下：
<figure class='code'><figcaption><span>~/.ssh/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ProxyCommand /home/username/bin/connect -S proxyhost:port %h %p
</span><span class='line'>    Host github.com
</span><span class='line'>    User git
</span><span class='line'>    Port 22
</span><span class='line'>    Hostname github.com
</span><span class='line'>    IdentityFile &ldquo;/home/username/.ssh/id_rsa&rdquo;
</span><span class='line'>    TCPKeepAlive yes
</span><span class='line'>    IdentitiesOnly yes&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>Host ssh.github.com
</span><span class='line'>User git
</span><span class='line'>Port 443
</span><span class='line'>Hostname ssh.github.com
</span><span class='line'>IdentityFile "/home/username/.ssh/id_rsa"
</span><span class='line'>TCPKeepAlive yes
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure>
把其中的<em>username</em> 替换为你的主机名字，<em>proxyhost:port</em> 替换为你使用的代理地址和端口，然后测试了以下，可以使用代理走通ssh 通道了：</p>

<pre><code>$ ssh -T git@github.com
Hi diufanshu! You've successfully authenticated, but GitHub does not provide  access.
</code></pre>

<h2>新的问题</h2>

<p>还没来得及高兴，就发现了一个小问题，我在实验室的另一台机器上部署了git 服务，供实验室内部使用，通过上面的修改，竟然不能在本地的git 服务器上提交代码了。也就是说这个小工具在走代理的时候不能走局域网了，当然最好的办法是把这个小工具的代码改一改，然后重新编译。然而经过一些折腾，发现有更好的办法，就是修改上面的config 文件：
<figure class='code'><figcaption><span>~/.ssh/config </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host github.com
</span><span class='line'>    User git
</span><span class='line'>    Port 22
</span><span class='line'>    Hostname github.com
</span><span class='line'>    IdentityFile &ldquo;/home/username/.ssh/id_rsa&rdquo;
</span><span class='line'>    TCPKeepAlive yes
</span><span class='line'>    IdentitiesOnly yes
</span><span class='line'>    ProxyCommand /home/username/bin/connect -S proxyhost:port %h %p&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Host ssh.github.com
</span><span class='line'>    User git
</span><span class='line'>    Port 443
</span><span class='line'>    Hostname ssh.github.com
</span><span class='line'>    IdentityFile &ldquo;/home/username/.ssh/id_rsa&rdquo;
</span><span class='line'>    TCPKeepAlive yes
</span><span class='line'>    IdentitiesOnly yes
</span><span class='line'>    ProxyCommand /home/username/bin/connect -S proxyhost:port %h %p&lt;br/></span></code></pre></td></tr></table></div></figure></p>

<p>这么改的话，只有当请求github.com 和 ssh.github.com 时会使用这个小工具进行代理。测试了一下，果然成功了。</p>

<h2>For Windows</h2>

<p>在Windows 下当然也可以用类似的方法，把connect.c 编译成可执行文件就行了，不过，所谓踏破铁鞋无觅处，git 在 win 下的版本自带了这个工具，在git 的安装目录下bin 文件夹里，这个工具已经编译成了connect.exe 可执行文件，直接用吧。当然需要在你的 ssh 默认配置文件夹里添加这个config文件，下面供参考：</p>

<pre><code>Host github.com
    User git
    Port 22
    Hostname github.com
    IdentityFile "/d/Users/username/.ssh/id_rsa"
    TCPKeepAlive yes
    IdentitiesOnly yes
    ProxyCommand /bin/connect.exe -S proxyhost:port %h %p  

Host ssh.github.com
    User git
    Port 443
    Hostname ssh.github.com
    IdentityFile "/d/Users/username/.ssh/id_rsa"
    TCPKeepAlive yes
    IdentitiesOnly yes
    ProxyCommand /bin/connect.exe -S proxyhost:port %h %p  
</code></pre>

<p>接下来，愉快地玩耍吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[科学上网]]></title>
    <link href="http://skychan.github.io/blog/2015/02/15/ke-xue-shang-wang/"/>
    <updated>2015-02-15T10:51:58+08:00</updated>
    <id>http://skychan.github.io/blog/2015/02/15/ke-xue-shang-wang</id>
    <content type="html"><![CDATA[<blockquote><p>科学上网是必须技能。</p></blockquote>

<h2>Goagent 的局域网/公网配置</h2>

<p>goagent 的强大不必多说了吧，项目在github托管:<a href="https://github.com/goagent/goagent">goagent</a>，大家可以通过git clone 的方式来获得最新版本，常见问题在其<a href="https://github.com/goagent/goagent/blob/wiki/FAQ.md">FAQ</a>里都有解答，“为什么要叫 goagent，而不叫 GoProxy？”“一开始叫 GoProxy 的，后来 Hewig 说软件名字带有 proxy 字样不祥，于是就改成了 goagent。”<!--more--></p>

<p>goagent 时常会更新版本，更新后要及时看文档，如果说要重新上传appid，那就再上传一次。一般来说，启动的时候，会自动导入证书，但是也不排除例外，如果出现类似于 The requested URL /_gh/ was not found on this server. 的问题，Don’t panic! 在浏览器里重新导入一次local 目录里的 CA.crt证书即可。</p>

<p>基本用法大家想必都会，就讲一讲局域网内共用一个goagent 的实例吧。</p>

<h3>实验环境</h3>

<p>模拟大多数高校实验室以及公司内部上网的环境，有一台服务器，可以直接连Internet，处在同一网段内的其他终端通过http/https 代理的方式来上网，比如说其主机IP为：10.11.12.13，port为8080，这时候要怎么设置才能科学上网捏？</p>

<h3>配置方法</h3>

<ul>
<li><strong>方法1</strong>：在自己的终端配置goagent</li>
</ul>


<p>这个设置比较简单，只要直接修改 proxy.ini 即可，找到[proxy]项，这样填写：</p>

<pre><code>[proxy]
enable = 1
autodetect = 1
host = 10.11.12.13
prot = 8080
username = [如果需要就填]
password = [和上面一样]
</code></pre>

<p>然后就可以了，和平常一样。</p>

<ul>
<li><strong>方法2</strong> :在服务器配置goagent</li>
</ul>


<p>在服务器上运行goagent，然后其他终端只要填写其监听地址即可，可以通过SwitchyProxy/SwitchyOmega/Proxyfoxy 这些代理切换插件来切换监听地址。这个方法的设置也不复杂，只需修改 proxy.ini 即可(不列举每项的所有栏目了)：</p>

<pre><code>[listen]
ip = 0.0.0.0
port = 8087
...

[dns] (如果启用的话)
enable = 1
listen = 0.0.0.0:53
</code></pre>

<p>然后在代理切换插件(以SwitchyOmega为例)里新建情景模式作为科学上网用：</p>

<p><strong>代理服务器</strong>: 10.11.12.13</p>

<p><strong>代理端口</strong>: 8087</p>

<p>至此，就可以快乐的上网了。这里提供的这两种方法，其实都是参考了项目主页里的<a href="https://github.com/goagent/goagent/blob/wiki/ConfigIntroduce.md.ini">Configurations</a>。</p>

<p>那么，还能再给力点吗，我喜欢用pac 方式自动判断需要代理和不需要代理的网站，关键是这种方式能有效过滤广告乃！经过一番实验，终得实现，下面来分享一下过程。</p>

<ul>
<li><strong>隐藏方法</strong> : 基于方法2</li>
</ul>


<p>首先想到的是，在代理切换插件里面新建pac情景模式，然后导入pac文件就行。说干就干，以SwitchyProxy为例，在新建的pac情景模式中，填写PAC 网址：</p>

<pre><code>http://10.11.12.13:8086/proxy.pac
</code></pre>

<p>注意端口是proxy.ini 里[pac]项设定的端口，此处默认设定是8086。这个proxy.pac文件其实位于10.11.12.13服务器goagent目录里的local目录下。随后，规则就导入进来了，测试了一下，科学上网毫无压力，然而，那些本不需要代理的网站都不能上了。排查原因，原来是这个proxy.pac 的规则中，所有不需要代理的网址都归类成'Direct'，就是不使用任何代理，所以终端的机器当然不能访问这些网站了。那么，就直接把它替换掉，也就是说，编辑proxy.pac，然后把所有 &lsquo;Direct'替换成：</p>

<pre><code>'PROXY 10.11.12.13:8080'
</code></pre>

<p>也就是用来普通代理上网的代理地址。在SwitchyProxy 中成功看见了规则的在线更新，然后就愉快的上网去咯！</p>

<p>然而，故事还没结束，在第二天，国内的网站又不能上了。怎么回事，PAC 规则怎么又变成原来的样子了！原来这个proxy.pac 文件是自动生成的，由于规则是直接从其他地方获取，然后每天重新生成一次，可以从proxy.ini 中的[pac]项看出：</p>

<pre><code>[pac]
enable = 1
ip = 0.0.0.0
port = 8086
file = proxy.pac
admode = 1
adblock = https://easlist-downloads.adblockplus.org/easylistchina.txt
gfwlist = https://autoproxy-gfwlist.google.com/svn/trunk/gfwlist.txt
expired = 86400
</code></pre>

<p>里面基本都说明了，所以说，要不就不让它更新，也就是注释掉expired 项目，要不就要修改proxy.pac 的生成代码了。自动更新这么好的东西怎么能把它关掉，当然是修改代码咯。</p>

<p>于是乎，在proxy.py 的881 行，找到了需要修改的位置，源码如下：</p>

<pre><code>default = 'PROXY %s:%s' % (common.PROXY_HOST,common.PROXY_PORT) if common.PROXY_ENABLE else 'DIRECT'
</code></pre>

<p>修改为：</p>

<pre><code>default = 'PROXY %s:%s' % (common.PROXY_HOST,common.PROXY_PORT) if common.PROXY_ENABLE or common.PAC_IP != '0.0.0.0' else 'DIRECT'
</code></pre>

<p>这么修改后，需要将proxy.ini 中的[pac]项的ip 和[proxy]项进行修改</p>

<pre><code>[pac]
enable = 1
ip = 10.11.12.13
...

[proxy]
enable = 0
autodetect = 1
host = 10.11.12.13
prot = 8080
...
</code></pre>

<p>注意，是关闭proxy，但指定了监听地址，也就是说，通过判断pac的监听ip来确定是否是在用局域网代理上网。当然了，生效的话需要等到下一次更新proxy.pac，等不及了，就把[pac]项的expired 修改为1，然后重启goagent，虽然不是立竿见影，但一会儿后，实验用的终端机器可以真正使用pac 方式科学上网了，查看pac文件，确实按照我想要的方式变化了。当然，最后还是要把失效时间改回来，毕竟每秒都更新也太喜新厌旧了吧！</p>

<h3>相关福利</h3>

<p>在google code issue 里面看到有位热心的同学贡献了一堆appid，这是福利，你懂的！！</p>

<pre><code>zimofanqiang|zimofanqiang1|zimofanqiang10|zimofanqiang11|zimofanqiang12|zimofanqiang13|zimofanqiang14|zimofanqiang15|zimofanqiang16|zimofanqiang17|zimofanqiang18|zimofanqiang19|zimofanqiang2|zimofanqiang20|zimofanqiang21|zimofanqiang22|zimofanqiang23|zimofanqiang24|zimofanqiang3| zimofanqiang4|zimofanqiang5|zimofanqiang6|zimofanqiang7|zimofanqiang8|zimofanqiang9|zhangnraka|zhangnraka1|zhangnraka10| ​
</code></pre>

<h4>福利更新</h4>

<pre><code>kqshu00|kqshu01|kqshu02|kqshu03|kqshu04|kqshu05|kqshu06|kqshu07|kqshu08|kqshu09|kqshu10|kqshu11a|kqshu12|kqshu13|kqshu14|kqshu15|kqshu16|kqshu17|kqshu18|kqshu19|kqshu20|kqshu21|kqshu22|kqshu23|kqshu24
</code></pre>

<h2>IP 更新</h2>

<p>经常使用得同学会发现，一段时间后goagent 里面满是黄色红色，这是因为IP 被墙了，仅仅更新goagent 有时不是很有用，这个时候，需要一款叫做<a href="https://github.com/azzvx/gogotester">GoGoTester</a> 的软件来测试仍然有效的IP ，把proxy.ini 里面[iplist] 项中的google_cn 和google_hk 替换即可。</p>

<h2>ShadowSocks</h2>

<p>需要有vps主机，可以找到很多免费的，用法比较简单。</p>

<h2>fqrouter</h2>

<p>Android 端利器，可以分享给同网段任意手机甚至是PC！</p>

<h2>OpenVPN</h2>

<p>又一移动端利器，似乎要配合一些例如Ovpn之类对配置文件获取应用才能使用，Google Play 毫无压力。</p>

<h2>保持更新</h2>

<p>前段段时间期末，一大堆作业，那次写的匆匆忙忙，这次稍作修改，持续保持更新！</p>
]]></content>
  </entry>
  
</feed>
